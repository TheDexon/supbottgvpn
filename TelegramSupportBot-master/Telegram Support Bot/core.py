import config
import datetime
import random
import psycopg2


# –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
def add_agent(agent_id):
    try:
        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        cur.execute("INSERT INTO agents (agent_id) VALUES (%s)", (agent_id,))
        con.commit()

        print("Agent added successfully.")

    except psycopg2.Error as e:
        print("Error adding agent:", e)

    finally:
        if con:
            cur.close()
            con.close()


# –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª
def add_file(req_id, file_id, file_name, type):
    try:
        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        cur.execute("INSERT INTO files (req_id, file_id, file_name, type) VALUES (%s, %s, %s, %s)",
                    (req_id, file_id, file_name, type))
        con.commit()

        print("File added successfully.")

    except psycopg2.Error as e:
        print("Error adding file:", e)

    finally:
        if con:
            cur.close()
            con.close()


# –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å
def new_req(user_id, request):
    try:
        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –ë–î
        cur.execute("INSERT INTO requests (user_id, req_status) VALUES (%s, 'waiting') RETURNING req_id", (user_id,))
        req_id = cur.fetchone()[0]

        dt = datetime.datetime.now()
        date_now = dt.strftime('%d.%m.%Y %H:%M:%S')

        # –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        cur.execute("INSERT INTO messages (req_id, message, user_status, date) VALUES (%s, %s, 'user', %s)",
                    (req_id, request, date_now))

        con.commit()
        print("Request created successfully.")

        return req_id

    except psycopg2.Error as e:
        print("Error creating request:", e)

    finally:
        if con:
            cur.close()
            con.close()


# –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
def add_message(req_id, message, user_status):
    try:
        if user_status == 'user':
            req_status = 'waiting'
        elif user_status == 'agent':
            req_status = 'answered'

        dt = datetime.datetime.now()
        date_now = dt.strftime('%d.%m.%Y %H:%M:%S')

        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        # –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        cur.execute("INSERT INTO messages (req_id, message, user_status, date) VALUES (%s, %s, %s, %s)",
                    (req_id, message, user_status, date_now))

        # –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
        cur.execute("UPDATE requests SET req_status = %s WHERE req_id = %s", (req_status, req_id))

        con.commit()
        print("Message added successfully.")

    except psycopg2.Error as e:
        print("Error adding message:", e)

    finally:
        if con:
            cur.close()
            con.close()


# –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª–∏
def add_passwords(passwords):
    try:
        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        for password in passwords:
            cur.execute("INSERT INTO passwords (password) VALUES (%s)", (password,))

        con.commit()

        print("Passwords added successfully.")

    except psycopg2.Error as e:
        print("Error adding passwords:", e)

    finally:
        if con:
            cur.close()
            con.close()


# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
def check_agent_status(user_id):
    try:
        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ user_id –≤ —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–æ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        user_id_str = str(user_id)

        cur.execute("SELECT * FROM agents WHERE agent_id = %s", (user_id_str,))
        agent = cur.fetchone()

        print("Agent status checked successfully.")

        return agent is not None

    except psycopg2.Error as e:
        print("Error checking agent status:", e)

    finally:
        if con:
            cur.close()
            con.close()



# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
def valid_password(password):
    try:
        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        cur.execute("SELECT * FROM passwords WHERE password = %s", (password,))
        password = cur.fetchone()

        print("Password validity checked successfully.")

        return password is not None

    except psycopg2.Error as e:
        print("Error checking password validity:", e)

    finally:
        if con:
            cur.close()
            con.close()


###########################

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–∞–π–ª, –µ—Å–ª–∏ –¥–∞ - –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ
def get_file(message):
    """
    –ê—Ç—Ä–∏–±—É—Ç file_name –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ç–∏–ø–∞—Ö —Ñ–∞–π–ª–æ–≤ - document –∏ video.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –Ω–µ –≤–∏–¥–µ–æ - –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (date_now)
    """

    types = ['document', 'video', 'audio', 'voice']
    dt = datetime.datetime.now()
    date_now = dt.strftime('%d.%m.%Y %H:%M:%S')

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–æ—Ç–æ
    try:
        return {'file_id': message.json['photo'][-1]['file_id'], 'file_name': date_now, 'type': 'photo',
                'text': str(message.caption)}

    # –ï—Å–ª–∏ –Ω–µ—Ç - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    except:
        for type in types:
            try:
                if type == 'document' or type == 'video':
                    file_name = message.json[type]['file_name']
                else:
                    file_name = date_now

                return {'file_id': message.json[type]['file_id'], 'file_name': file_name, 'type': type,
                        'text': str(message.caption)}
            except:
                pass

        return None


# –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞
def get_icon_from_status(req_status, user_status):
    if req_status == 'confirm':
        return '‚úÖ'

    elif req_status == 'waiting':
        if user_status == 'user':
            return '‚è≥'
        elif user_status == 'agent':
            return '‚ùóÔ∏è'

    elif req_status == 'answered':
        if user_status == 'user':
            return '‚ùóÔ∏è'
        elif user_status == 'agent':
            return '‚è≥'


# –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å —Ñ–∞–π–ª–æ–º
def get_file_text(file_name, type):
    if type == 'photo':
        return f'üì∑ | –§–æ—Ç–æ {file_name}'
    elif type == 'document':
        return f'üìÑ | –î–æ–∫—É–º–µ–Ω—Ç {file_name}'
    elif type == 'video':
        return f'üé• | –í–∏–¥–µ–æ {file_name}'
    elif type == 'audio':
        return f'üéµ | –ê—É–¥–∏–æ {file_name}'
    elif type == 'voice':
        return f'üéß | –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {file_name}'


# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏
def generate_passwords(number, length):
    chars = 'abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'

    passwords = []
    for _ in range(number):
        password = ''
        for _ in range(length):
            password += random.choice(chars)

        passwords.append(password)

    return passwords


# –ü–æ–ª—É—á–∏—Ç—å —é–∑–µ—Ä –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å
def get_user_id_of_req(req_id):
    try:
        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        cur.execute("SELECT user_id FROM requests WHERE req_id = %s", (req_id,))
        user_id = cur.fetchone()[0]

        return user_id

    except psycopg2.Error as e:
        print("Error getting user id of request:", e)

    finally:
        if con:
            cur.close()
            con.close()


# –ü–æ–ª—É—á–∏—Ç—å file_id –∏–∑ id –∑–∞–ø–∏—Å–∏ –≤ –ë–î
def get_file_id(id):
    try:
        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        cur.execute("SELECT file_id FROM files WHERE id = %s", (id,))
        file_id = cur.fetchone()[0]

        return file_id

    except psycopg2.Error as e:
        print("Error getting file id:", e)

    finally:
        if con:
            cur.close()
            con.close()


# –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
def get_req_status(req_id):
    try:
        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        cur.execute("SELECT req_status FROM requests WHERE req_id = %s", (req_id,))
        req_status = cur.fetchone()[0]

        return req_status

    except psycopg2.Error as e:
        print("Error getting request status:", e)

    finally:
        if con:
            cur.close()
            con.close()


# –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å
def delete_password(password):
    try:
        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        cur.execute("DELETE FROM passwords WHERE password = %s", (password,))
        con.commit()

    except psycopg2.Error as e:
        print("Error deleting password:", e)

    finally:
        if con:
            cur.close()
            con.close()


# –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
def delete_agent(agent_id):
    try:
        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        cur.execute("DELETE FROM agents WHERE agent_id = %s", (agent_id,))
        con.commit()

    except psycopg2.Error as e:
        print("Error deleting agent:", e)

    finally:
        if con:
            cur.close()
            con.close()


# –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å
def confirm_req(req_id):
    try:
        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        cur.execute("UPDATE requests SET req_status = 'confirm' WHERE req_id = %s", (req_id,))
        con.commit()

    except psycopg2.Error as e:
        print("Error confirming request:", e)

    finally:
        if con:
            cur.close()
            con.close()


# –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª–∏ —Å –ª–∏–º–∏—Ç–æ–º
def get_passwords(number):
    try:
        limit = (int(number) * 10) - 10

        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        cur.execute("SELECT password FROM passwords LIMIT 10 OFFSET %s", (limit,))
        passwords = cur.fetchall()

        return passwords

    except psycopg2.Error as e:
        print("Error getting passwords:", e)

    finally:
        if con:
            cur.close()
            con.close()


# –ü–æ–ª—É—á–∏—Ç—å –∞–≥–µ–Ω—Ç–æ–≤ —Å –ª–∏–º–∏—Ç–æ–º
def get_agents(number):
    try:
        limit = (int(number) * 10) - 10

        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        cur.execute("SELECT agent_id FROM agents LIMIT 10 OFFSET %s", (limit,))
        agents = cur.fetchall()

        return agents

    except psycopg2.Error as e:
        print("Error getting agents:", e)

    finally:
        if con:
            cur.close()
            con.close()


# –ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –∑–∞–ø—Ä–æ—Å—ã —Å –ª–∏–º–∏—Ç–æ–º
def my_reqs(number, user_id):
    try:
        limit = (int(number) * 10) - 10

        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        cur.execute("SELECT req_id, req_status FROM requests WHERE user_id = %s ORDER BY req_id DESC LIMIT 10 OFFSET %s", (str(user_id), limit))
        reqs = cur.fetchall()

        return reqs

    except psycopg2.Error as e:
        print("Error getting my requests:", e)

    finally:
        if con:
            cur.close()
            con.close()



# –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É —Å –ª–∏–º–∏—Ç–æ–º
def get_reqs(number, callback):
    try:
        limit = (int(number) * 10) - 10
        req_status = callback.replace('_reqs', '')

        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        cur.execute("SELECT req_id, req_status FROM requests WHERE req_status = %s ORDER BY req_id DESC LIMIT 10 OFFSET %s", (req_status, limit))
        reqs = cur.fetchall()

        return reqs

    except psycopg2.Error as e:
        print("Error getting requests by status:", e)

    finally:
        if con:
            cur.close()
            con.close()


# –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É —Å –ª–∏–º–∏—Ç–æ–º
def get_files(number, req_id):
    try:
        limit = (int(number) * 10) - 10

        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        cur.execute("SELECT id, file_name, type FROM files WHERE req_id = %s ORDER BY id DESC LIMIT 10 OFFSET %s", (req_id, limit))
        files = cur.fetchall()

        return files

    except psycopg2.Error as e:
        print("Error getting files by request:", e)

    finally:
        if con:
            cur.close()
            con.close()


# –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–∞
def get_request_data(req_id, callback):
    try:
        if 'my_reqs' in callback:
            get_dialog_user_status = 'user'
        else:
            get_dialog_user_status = 'agent'

        con = psycopg2.connect(
            host=config.PostgreSQL[0],
            user=config.PostgreSQL[1],
            password=config.PostgreSQL[2],
            database=config.PostgreSQL[3]
        )
        cur = con.cursor()

        cur.execute("SELECT message, user_status, date FROM messages WHERE req_id = %s", (req_id,))
        messages = cur.fetchall()

        data = []
        text = ''
        i = 1

        for message in messages:
            message_value = message[0]
            user_status = message[1]
            date = message[2]

            if user_status == 'user':
                if get_dialog_user_status == 'user':
                    text_status = 'üë§ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
                else:
                    text_status = 'üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            elif user_status == 'agent':
                text_status = 'üßë‚Äçüíª –ê–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏'

            # –ë—ç–∫–∞–ø –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            backup_text = text
            text += f'{text_status}\n{date}\n{message_value}\n\n'

            # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤ Telegram, —Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –∏ –Ω–∞—á–∞—Ç—å –≤—Ç–æ—Ä—É—é
            if len(text) >= 4096:
                data.append(backup_text)
                text = f'{text_status}\n{date}\n{message_value}\n\n'

            # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –∏—Ç–µ—Ä–∞—Ü–∏—è, —Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—ã—â–∞—é—â–∏–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä (4096 —Å–∏–º–≤–æ–ª–æ–≤).
            # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç - –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Å—Ç—å –∏ –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é. –ï—Å–ª–∏ –Ω–µ—Ç - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å —Å–ø–∏—Å–∫–∞.
            if len(messages) == i:
                if len(text) >= 4096:
                    data.append(backup_text)
                    text = f'{text_status}\n{date}\n{message_value}\n\n'

                data.append(text)

            i += 1

        return data

    except psycopg2.Error as e:
        print("Error getting request data:", e)

    finally:
        if con:
            cur.close()
            con.close()